String comparisonOperator( workflow::EqualityExpression comparisonOperator):
	switch 
	{ 
		case comparisonOperator.metaType.toString() == "workflow::Equal" : '=='
		case comparisonOperator.metaType.toString() == "workflow::NotEqual" : '!='
		case comparisonOperator.metaType.toString() == "workflow::LessThan": '<'
	    case comparisonOperator.metaType.toString() == "workflow::GreaterThan": '>'
	    case comparisonOperator.metaType.toString() == "workflow::LessThanOrEqual": '<='
	    case comparisonOperator.metaType.toString() == "workflow::GreaterThanOrEqual": '>='
	    default : 'not defined'
	};
	
String arithmeticOperator( workflow::ArithmeticExpression arithmeticOperator):
	switch 
	{ 
		case arithmeticOperator.metaType.toString() == "workflow::Addition" : '+'
		case arithmeticOperator.metaType.toString() == "workflow::Subtraction": '-'
	    case arithmeticOperator.metaType.toString() == "workflow::Multiplication": '*'
	    case arithmeticOperator.metaType.toString() == "workflow::Division": '/'
	    default : 'not defined'
	};

String logicalOperator( workflow::LogicExpression logicalOperator ):
	switch 
	{ 
		case logicalOperator.metaType.toString() == "workflow::And" : '&&'
		case logicalOperator.metaType.toString() == "workflow::Or": '||'
	    default : 'not defined'
	};
	
String unaryOperator( workflow::UnaryExpression unaryOperator ):
	switch 
	{ 
		case unaryOperator.metaType.toString() == "workflow::Not" : '!'
		case unaryOperator.metaType.toString() == "workflow::UMinus": '-'
	    default : 'not defined'
	};

String timestamp():
	JAVA utils.TemplateUtils.timestamp();

String typesInJava( workflow::Type type):
switch 
	{ 
		case type.toString() == "string" : 'String'
	    default : type.toString()
	};

String typesInCS( workflow::Type type):
switch 
	{ 
		case type.toString() == "boolean" : 'Boolean'
	    default : type.toString()
	};
	
String typesInCPP( workflow::Type type):
switch 
	{ 
		case type.toString() == "boolean" : 'bool'
	    default : type.toString()
	};
	
String typesInPython( workflow::Type type):
switch 
	{ 
		case type.toString() == "string" : 'str'
		case type.toString() == "boolean" : 'bool'
	    default : type.toString()
	};
	
String defaultValue( workflow::Type type):
switch 
	{ 
		case type.toString() == "int" : '0'
		case type.toString() == "long" : '0'
		case type.toString() == "double" : '0'
		case type.toString() == "float" : '0'
		case type.toString() == "string" : '""'
		case type.toString() == "boolean" : 'true'
		default : 'not defined'
	};
	
String valueString (workflow::Constant constant):
switch
	{
		case constant.asString.length.toString() != "null" : '"' + constant.asString + '"'
		default : 'not defined'
	};