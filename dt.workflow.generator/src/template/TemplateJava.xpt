«IMPORT workflow»

«EXTENSION template::GeneratorExtensions»

«DEFINE ProcDeclJava FOR ProcedureDeclaration»
«IF accessModifier.toString()!="default"»«accessModifier»«ENDIF» «returnType» «this.name» («IF !Parameter.isEmpty» «FOREACH Parameter AS param ITERATOR iter» «typesInJava(param.type)» «param.name» «IF !iter.lastIteration»,«ENDIF»«ENDFOREACH»«ENDIF»){
«IF !Variables.isEmpty» «FOREACH Variables AS var ITERATOR iter» «IF var.isConstant» final «ENDIF» «typesInJava(var.type)» «var.name»;«ENDFOREACH»«ENDIF»
«IF Block.name.length!=0 && !Body.Statement.isEmpty» «IF !Body.Statement.select(e | e.metaType.name.toString() == "workflow::Read").isEmpty» Scanner reader = new Scanner(System.in); «ENDIF» «EXPAND statement FOREACH Body.Statement» } «ELSE» } «ENDIF»
«ENDDEFINE»

«DEFINE statement FOR Statement»
«ENDDEFINE»

«DEFINE statement FOR EqualityExpression-»
«EXPAND operand FOR this.Operand1-» «comparisonOperator()-» «EXPAND operand FOR this.Operand2-» 
«ENDDEFINE-»

«DEFINE statement FOR ArithmeticExpression-»
«EXPAND operand FOR this.Operand1-» «arithmeticOperator()-» «EXPAND operand FOR this.Operand2-» 
«ENDDEFINE-»

«DEFINE statement FOR LogicExpression-»
«EXPAND operand FOR this.Operand1-» «logicalOperator()-» «EXPAND operand FOR this.Operand2-» 
«ENDDEFINE-»

«DEFINE statement FOR UnaryExpression-»
«unaryOperator()-»«EXPAND operand FOR this.Operand-»
«ENDDEFINE-»

«DEFINE statement FOR VariableAssignment-»
«EXPAND operand FOR LValue» = «EXPAND operand FOR RValue-»;
«ENDDEFINE-»

«DEFINE statement FOR Read-»
«IF type.toString() == "int"-» 
«type» «rVar.name» = reader.nextInt();
«ELSEIF type.toString() == "long"-» 
«type» «rVar.name» = reader.nextLong();
«ELSEIF type.toString() == "double"-» 
«type» «rVar.name» = reader.nextDouble();
«ELSEIF type.toString() == "float"-» 
«type» «rVar.name» = reader.nextFloat();
«ELSEIF type.toString() == "string"-» 
String «rVar.name» = reader.nextLine();
«ELSEIF type.toString() == "boolean"-» 
«type» «rVar.name» = reader.nextBoolean();
«ENDIF-»
«ENDDEFINE»

«DEFINE statement FOR Write-»
System.out.println(«wVar.name»);
«ENDDEFINE»

«DEFINE statement FOR ProcedureCall»
«name»(«FOREACH Argument AS arg ITERATOR iter»«EXPAND operand FOR arg»«IF !iter.lastIteration»,«ENDIF»«ENDFOREACH»);
«ENDDEFINE»

«DEFINE statement FOR ProcedureReturn-»
return «EXPAND operand FOR Expression-»;
«ENDDEFINE»

«DEFINE statement FOR If»
if(«EXPAND statement FOR Condition-»){«EXPAND statement FOREACH Body.Statement-»
}
«IF !Alternative.Statement.isEmpty»else{«EXPAND statement FOREACH Alternative.Statement-» }«ENDIF-»
«ENDDEFINE»

«DEFINE statement FOR While»
while(«EXPAND statement FOR Condition-»){«EXPAND statement FOREACH Body.Statement-»
}
«ENDDEFINE»

«DEFINE operand FOR Expression-»
«ENDDEFINE-»

«DEFINE operand FOR Variable-»
«this.name-»
«ENDDEFINE-»

«DEFINE operand FOR EqualityExpression-»
«EXPAND operand FOR this.Operand1-» «comparisonOperator()-» «EXPAND operand FOR this.Operand2-»
«ENDDEFINE-»

«DEFINE operand FOR ArithmeticExpression-»
«EXPAND operand FOR this.Operand1-» «arithmeticOperator()-» «EXPAND operand FOR this.Operand2-»
«ENDDEFINE-»

«DEFINE operand FOR LogicExpression-»
«EXPAND operand FOR this.Operand1-» «logicalOperator()-» «EXPAND operand FOR this.Operand2-»
«ENDDEFINE-»

«DEFINE operand FOR ProcedureCall»
«name»(«FOREACH Argument AS arg ITERATOR iter»«EXPAND operand FOR arg»«IF !iter.lastIteration»,«ENDIF»«ENDFOREACH»)
«ENDDEFINE»

«DEFINE operand FOR UnaryExpression-»
«unaryOperator()-»«EXPAND operand FOR this.Operand-»
«ENDDEFINE-»

«DEFINE operand FOR Constant-»
«IF asInteger.length.toString() != "null"» «asInteger.toString()-»
«ELSEIF asReal.length.toString() != "null"» «asReal.toString()-»
«ELSEIF asString.length.toString() != "null"» «valueString()-»
«ELSEIF asInteger.length.toString() == "null" && asReal.length.toString() == "null" && asString.length.toString() == "null"» «asBoolean.toString()-»
«ENDIF-»
«ENDDEFINE-»
