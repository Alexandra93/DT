«IMPORT design»

«EXTENSION template::GeneratorExtensions»

«DEFINE ClassDesignPython FOR Design»
«FOREACH this.elements AS element»
«FILE element.name.toFirstUpper() + ".py"-»
# Generated at «timestamp()»

«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Generalization") AS generalizations-» 
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Realization") AS realizations-»
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Dependency") AS dependencies-»
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Aggregation") AS aggregations-»
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Composition") AS compositions-»
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Association") AS associations-»
«IF !generalizations.isEmpty-»
«FOREACH generalizations AS generalization-»
from «generalization.target.name» import «generalization.target.name» 
«ENDFOREACH-»
«ENDIF-»
«IF !realizations.isEmpty-»
«FOREACH realizations AS realization-»
from «realization.target.name» import «realization.target.name» 
«ENDFOREACH-»
«ENDIF-»
«IF !dependencies.isEmpty-»
«FOREACH dependencies AS dependency-»
from «dependency.target.name» import «dependency.target.name» 
«ENDFOREACH-»
«ENDIF-»

class «element.name.toFirstUpper()-» «IF !generalizations.isEmpty || !realizations.isEmpty-»(«IF !generalizations.isEmpty-»«FOREACH generalizations AS generalization ITERATOR iter-» «generalization.target.name.toFirstUpper()-»«IF !iter.lastIteration»,«ENDIF-»«ENDFOREACH-»«ENDIF-»
«IF !generalizations.isEmpty && !realizations.isEmpty-»,«ENDIF-»
«IF !realizations.isEmpty-»
«FOREACH realizations AS realization ITERATOR iter-» «realization.target.name.toFirstUpper()-»«IF !iter.lastIteration»,«ENDIF»«ENDFOREACH-»
«ENDIF-»
«ENDIF-»
«IF !generalizations.isEmpty || !realizations.isEmpty-»)«ENDIF-»:
«EXPAND Attributes FOREACH element.attributes»

«IF element.metaType.toString()=="design::Class"-»
«IF !element.attributes.isEmpty || !aggregations.isEmpty || !compositions.isEmpty-»
    def __init__ (self,«IF !element.attributes.isEmpty-»«FOREACH element.attributes AS attribute ITERATOR iter-» «attribute.name»«IF !iter.lastIteration»,«ENDIF-»«ENDFOREACH-»«ENDIF-»
«IF !element.attributes.isEmpty && !aggregations.isEmpty-»,«ENDIF-»«IF !aggregations.isEmpty-»«FOREACH aggregations AS aggregation ITERATOR iter-» «aggregation.target.name»«IF !iter.lastIteration»,«ENDIF-»«ENDFOREACH-»«ENDIF-» 
«IF (!element.attributes.isEmpty && !compositions.isEmpty) || (!aggregations.isEmpty && !compositions.isEmpty)-»,«ENDIF-»«IF !compositions.isEmpty-»«FOREACH compositions AS composition ITERATOR iter-» «composition.target.name»«IF !iter.lastIteration»,«ENDIF-»«ENDFOREACH-»«ENDIF-»):
	«IF !element.attributes.isEmpty-»
	«FOREACH element.attributes AS attribute-»
		self.«attribute.name» = «attribute.name»
	«ENDFOREACH-»
	«ENDIF-»
	«IF !aggregations.isEmpty-»
	«FOREACH aggregations AS aggregation-»
		self.«aggregation.target.name» = «aggregation.target.name»
	«ENDFOREACH-»
	«ENDIF-»
	«IF !compositions.isEmpty-»
	«FOREACH compositions AS composition-»
		self.«composition.target.name» = «composition.target.name-»(«IF !composition.target.attributes.isEmpty-»«FOREACH composition.target.attributes AS attribute ITERATOR iter-»«composition.target.name».«attribute.name» «IF !iter.lastIteration-»,«ENDIF-»«ENDFOREACH-»«ENDIF-»)
	«ENDFOREACH-»
	«ENDIF-»
«ENDIF-»
«ENDIF-»

«EXPAND Methods FOREACH element.attributes-»

«IF !associations.isEmpty-»
«FOREACH associations AS association-»
	def get«association.target.name.toFirstUpper()-»(self):
		return «association.target.name.toFirstUpper()-»
«ENDFOREACH-»
«ENDIF-»
«IF !dependencies.isEmpty-»
«FOREACH dependencies AS dependency-»
	def method«dependency.target.name.toFirstUpper()»(self):
		return «IF !dependency.target.attributes.isEmpty-»«FOREACH dependency.target.attributes AS attribute ITERATOR iter-» «dependency.target.name».«attribute.name»«IF !iter.lastIteration»+ " " +«ENDIF-»«ENDFOREACH-»«ELSE-»None«ENDIF-»
«ENDFOREACH-»
«ENDIF-»
«IF !realizations.isEmpty-»
«FOREACH realizations AS realization-»
«EXPAND MethodsOverriden FOREACH realization.target.attributes-»
«ENDFOREACH-»
«ENDIF-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDFILE-»
«ENDFOREACH-»
«ENDDEFINE»
«DEFINE Attributes FOR Attribute»
«IF this.eContainer.metaType.toString()=="design::Class"-»
    «this.name» = «this.type.defaultValue()-»
«ELSE-»
	«this.name» = «this.type.defaultValue()-»
«ENDIF-»
«ENDDEFINE-»
«DEFINE Methods FOR Attribute»
«IF this.eContainer.metaType.toString()=="design::Class"-»
    def «setter()»(self, «this.name»):
        self.«name» = «name»

    def «getter()»(self):
        return self.«name»
«ELSEIF this.eContainer.metaType.toString()=="design::Interface"-»
 	def «setter()»(self, «this.name»):
 		raise NotImplementedError('In order to use this base class, the method should be defined.')
 	
    def «getter()»(self):
    	raise NotImplementedError('In order to use this base class, the method should be defined.')
«ENDIF-»
«ENDDEFINE-»

«DEFINE MethodsOverriden FOR Attribute-»
	def «setter()»(self, «this.name»):
		 raise NotImplementedError('The method comes from base class and should be defined.')
 	
    def «getter()»(self):
    	 raise NotImplementedError('The method comes from base class and should be defined.')
«ENDDEFINE-»


