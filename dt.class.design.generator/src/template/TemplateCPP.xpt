«IMPORT design»

«EXTENSION template::GeneratorExtensions»

«DEFINE ClassDesignCPP FOR Design»
«FOREACH this.elements AS element»
«FILE element.name.toFirstUpper() + ".cpp"-»
/* Generated at «timestamp()» */
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Generalization") AS generalizations-» 
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Realization") AS realizations-»
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Dependency") AS dependencies-»
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Aggregation") AS aggregations-»
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Composition") AS compositions-»
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Association") AS associations-»

#include<iostream>
«IF !aggregations.isEmpty-»
#include<vector>
«ENDIF-»
«IF !generalizations.isEmpty-»
«FOREACH generalizations AS generalization-»
#include "«generalization.target.name».cpp"
«ENDFOREACH-»
«ENDIF-»
«IF !realizations.isEmpty-»
«FOREACH realizations AS realization-»
#include "«realization.target.name».cpp"
«ENDFOREACH-»
«ENDIF-»
«IF !dependencies.isEmpty-»
«FOREACH dependencies AS dependency-»
#include "«dependency.target.name».cpp"
«ENDFOREACH-»
«ENDIF-»
«IF !aggregations.isEmpty-»
«FOREACH aggregations AS aggregation-»
#include "«aggregation.target.name».cpp"
«ENDFOREACH-»
«ENDIF-»
«IF !compositions.isEmpty-»
«FOREACH compositions AS composition-»
#include "«composition.target.name».cpp"
«ENDFOREACH-»
«ENDIF-»
using namespace std;

class «element.name.toFirstUpper()-» «IF !generalizations.isEmpty || !realizations.isEmpty-»:«IF !generalizations.isEmpty-»«FOREACH generalizations AS generalization ITERATOR iter-» public «generalization.target.name.toFirstUpper()-»«IF !iter.lastIteration»,«ENDIF-»«ENDFOREACH-»«ENDIF-»
«IF !generalizations.isEmpty && !realizations.isEmpty-»,«ENDIF-»
«IF !realizations.isEmpty-»
«FOREACH realizations AS realization ITERATOR iter-» public «realization.target.name.toFirstUpper()-»«IF !iter.lastIteration»,«ENDIF»«ENDFOREACH-»
«ENDIF-»
«ENDIF-»
{
«IF !element.attributes.isEmpty-»
private:
«ENDIF-»
«EXPAND Attributes FOREACH element.attributes»
public:
«IF element.metaType.toString()=="design::Class"-»
	«element.name.toFirstUpper()»() {
	
	}
«ENDIF-»
«IF !compositions.isEmpty-»
«FOREACH compositions AS composition-»
	«composition.target.name.toFirstUpper()» _«composition.target.name.toFirstLower()-»;
«ENDFOREACH-»
«ENDIF-»
«IF !associations.isEmpty-»
«FOREACH associations AS association-»
	«association.target.name.toFirstUpper()» *_«association.target.name.toFirstLower()-»_ptr;
«ENDFOREACH-»
«ENDIF-»
«IF !aggregations.isEmpty-»
«FOREACH aggregations AS aggregation-»
	vector<«aggregation.target.name.toFirstUpper()»*> _«aggregation.target.name.toFirstLower()-»;
«ENDFOREACH-»
«ENDIF-»
«IF !associations.isEmpty-»
«FOREACH associations AS association-»
	public «association.target.name.toFirstUpper()» get«association.target.name.toFirstUpper()-»(){
		return _«association.target.name.toFirstLower()-»;
	}
«ENDFOREACH-»
«ENDIF-»
«IF !dependencies.isEmpty-»
«FOREACH dependencies AS dependency-»
	void method«dependency.target.name.toFirstUpper()» («dependency.target.name.toFirstUpper()» «dependency.target.name.toFirstLower()-»){
	}
«ENDFOREACH-»
«ENDIF-»
«EXPAND Methods FOREACH element.attributes-»
«IF !realizations.isEmpty-»
«FOREACH realizations AS realization-»
«EXPAND MethodsOverriden FOREACH realization.target.attributes-»
«ENDFOREACH-»
«ENDIF-»
};
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDFILE-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE Attributes FOR Attribute»
«IF this.eContainer.metaType.toString()=="design::Class"-»
    «typesInCPP(this.type)» «this.name»;
«ELSE-»
	«typesInCPP(this.type)» «this.name» = «this.type.defaultValue()-»;
«ENDIF-»
«ENDDEFINE-»

«DEFINE Methods FOR Attribute»
«IF this.eContainer.metaType.toString()=="design::Class"-»
    void «setter()»(«typesInCPP(this.type)» «this.name») {
        «name» = «name»;
    }

    «typesInCPP(this.type)» «getter()»() {
        return «name»;
    }

«ELSEIF this.eContainer.metaType.toString()=="design::Interface"-»
 	virtual void «setter()»(«typesInCPP(this.type)» «this.name») = 0;
 	
    virtual «typesInCPP(this.type)» «getter()»() = 0;
«ENDIF-»
«ENDDEFINE»

«DEFINE MethodsOverriden FOR Attribute»
	void «setter()»(«typesInCPP(this.type)» «this.name»){
	
	}
 	
    «typesInCPP(this.type)» «getter()»(){
    	return «this.type.defaultValue()»;
    }
«ENDDEFINE»


