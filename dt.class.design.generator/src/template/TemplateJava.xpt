«IMPORT design»

«EXTENSION template::GeneratorExtensions»

«DEFINE ClassDesignJava FOR Design»
«FOREACH this.elements AS element»
«FILE element.name.toFirstUpper() + ".java"-»
/* Generated at «timestamp()» */

«element.accessModifier» «element.classifier()» «element.name.toFirstUpper()-» 
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Generalization") AS generalizations-» 
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Realization") AS realizations-»
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Dependency") AS dependencies-»
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Aggregation") AS aggregations-»
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Composition") AS compositions-»
«LET this.relations.select(e|e.source.name == element.name && e.metaType.toString()=="design::Association") AS associations-»
«IF !generalizations.isEmpty-»
 extends«FOREACH generalizations AS generalization ITERATOR iter-» «generalization.target.name.toFirstUpper()-»«IF !iter.lastIteration»,«ENDIF»«ENDFOREACH-»
«ENDIF-»
«IF !realizations.isEmpty-»
 implements«FOREACH realizations AS realization ITERATOR iter-» «realization.target.name.toFirstUpper()-»«IF !iter.lastIteration»,«ENDIF»«ENDFOREACH-»
«ENDIF-»
{
«EXPAND Attributes FOREACH element.attributes»
«IF element.metaType.toString()=="design::Class"-»
	public «element.name.toFirstUpper()»() {
	
	}
«ENDIF-»
«EXPAND Operations FOREACH element.operations»

«IF !compositions.isEmpty-»
«FOREACH compositions AS composition-»
	private «composition.target.name.toFirstUpper()» _«composition.target.name.toFirstLower()» = new «composition.target.name.toUpperCase()»();
«ENDFOREACH-»
«ENDIF-»

«IF !associations.isEmpty-»
«FOREACH associations AS association-»
	private «association.target.name.toFirstUpper()» _«association.target.name.toFirstLower()»;
«ENDFOREACH-»
«ENDIF-»

«IF !aggregations.isEmpty-»
«FOREACH aggregations AS aggregation-»
	private «aggregation.target.name.toFirstUpper()» _«aggregation.target.name.toFirstLower()»;
«ENDFOREACH-»

«FOREACH aggregations AS aggregation-»
	public void set«aggregation.target.name.toFirstUpper()»(«aggregation.target.name.toFirstUpper()» «aggregation.target.name.toFirstLower()»){
		_«aggregation.target.name.toFirstLower()» = «aggregation.target.name.toFirstLower()»;
	}
«ENDFOREACH-»
«ENDIF»

«IF !associations.isEmpty-»
«FOREACH associations AS association-»
	public «association.target.name.toFirstUpper()» get«association.target.name.toFirstUpper()»(){
		return _«association.target.name.toFirstLower()»;
	}
«ENDFOREACH-»
«ENDIF»

«IF !dependencies.isEmpty-»
«FOREACH dependencies AS dependency-»
	public void method«dependency.target.name.toFirstUpper()» («dependency.target.name.toFirstUpper()» «dependency.target.name.toFirstLower()»){
	}
«ENDFOREACH-»
«ENDIF-»
«EXPAND Methods FOREACH element.attributes»
«IF !realizations.isEmpty-»
«FOREACH realizations AS realization-»
«EXPAND MethodsOverriden FOREACH realization.target.attributes»
«EXPAND MethodsOverriden FOREACH realization.target.operations»
«ENDFOREACH»
«ENDIF»
}
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDLET-»
«ENDFILE-»
«ENDFOREACH-»
«ENDDEFINE»

«DEFINE Attributes FOR Attribute»
«IF this.eContainer.metaType.toString()=="design::Class"-»
    private «this.type» «this.name»;
«ELSE-»
	public «this.type» «this.name» = «this.type.defaultValue()-»;
«ENDIF-»
«ENDDEFINE»

«DEFINE Operations FOR Operation»
«IF this.eContainer.metaType.toString()=="design::Class"-»
    private «this.returnType» «this.name»(){
«IF this.returnType.defaultValue()!="void"-»
		return «this.returnType.defaultValue()»;
«ENDIF-»
	}
«ELSE-»
	public «this.returnType» «this.name»();
«ENDIF-»
«ENDDEFINE»

«DEFINE Methods FOR Attribute»
«IF this.eContainer.metaType.toString()=="design::Class"-»
    public void «setter()»(«this.type» «this.name») {
        this.«name» = «name»;
    }

    public «this.type» «getter()»() {
        return «name»;
    }

«ELSEIF this.eContainer.metaType.toString()=="design::Interface"-»
 	public void «setter()»(«this.type» «this.name»);
 	
    public «this.type» «getter()»();
«ENDIF-»
«ENDDEFINE»

«DEFINE MethodsOverriden FOR Attribute»
	@Override
	public void «setter()»(«this.type» «this.name»){
	
	}
 	
 	@Override
    public «this.type» «getter()»(){
    	return «this.type.defaultValue()»;
    }
«ENDDEFINE»

«DEFINE MethodsOverriden FOR Operation»
	@Override
	public «this.returnType» «this.name»(){
«IF this.returnType.defaultValue()!="void"-»
		return «this.returnType.defaultValue()»;
«ENDIF-»
	}
«ENDDEFINE»

